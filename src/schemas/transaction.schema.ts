// Generated by ts-to-zod
import { z } from "zod";

export const getPendingTransactionsResultSchema = z.object({
  err_msg: z.string(),
  success: z.boolean(),
  transactions: z.array(
    z.object({
      alias: z.string(),
      data: z.string(),
      data_key: z.string(),
      error_text: z.string(),
      from_peer_id: z.string(),
      hash: z.string(),
      host_id: z.string(),
      meta_contract_id: z.string(),
      method: z.string(),
      nonce: z.number(),
      public_key: z.string(),
      status: z.number(),
      timestamp: z.number(),
      token_id: z.string(),
      token_key: z.string(),
    })
  ),
});

export const getMetadataWithHistoryArgArgsSchema = z.object({
  alias: z.string(),
  data_key: z.string(),
  public_key: z.string(),
});

export const getMetadataWithHistoryResultSchema = z.object({
  err_msg: z.string(),
  history: z.array(z.string()),
  metadata: z.string(),
  success: z.boolean(),
});

export const getAllCronsResultSchema = z.object({
  crons: z.array(
    z.object({
      address: z.string(),
      chain: z.string(),
      status: z.number(),
      token_type: z.string(),
      topic: z.string(),
    })
  ),
  err_msg: z.string(),
  success: z.boolean(),
});

export const getMetadatasResultSchema = z.object({
  err_msg: z.string(),
  metadatas: z.array(
    z.object({
      alias: z.string(),
      cid: z.string(),
      data_key: z.string(),
      public_key: z.string(),
    })
  ),
  success: z.boolean(),
});

export const getMetaContractResultSchema = z.object({
  err_msg: z.string(),
  meta: z.object({
    meta_contract_id: z.string(),
    public_key: z.string(),
    token_key: z.string(),
  }),
  success: z.boolean(),
});

export const getMetadataArgArgsSchema = z.object({
  alias: z.string(),
  data_key: z.string(),
  public_key: z.string(),
});

export const getMetadataResultSchema = z.object({
  err_msg: z.string(),
  metadata: z.object({
    alias: z.string(),
    cid: z.string(),
    data_key: z.string(),
    public_key: z.string(),
  }),
  success: z.boolean(),
});

export const sendTransactionArgArgsSchema = z.object({
  alias: z.string(),
  data: z.string(),
  data_key: z.string(),
  method: z.string(),
  nonce: z.number(),
  public_key: z.string(),
  signature: z.string(),
  token_id: z.string(),
  token_key: z.string(),
});

export const sendTransactionResultSchema = z.object({
  transaction_hash: z.string(),
});

export const setCloneArgArgsSchema = z.object({
  data: z.string(),
  final_error_msg: z.string(),
  meta_contract_id: z.string(),
  on_metacontract_result: z.boolean(),
  transaction_hash: z.string(),
});

export const getTransactionResultSchema = z.object({
  err_msg: z.string(),
  success: z.boolean(),
  transaction: z.object({
    alias: z.string(),
    data: z.string(),
    data_key: z.string(),
    error_text: z.string(),
    from_peer_id: z.string(),
    hash: z.string(),
    host_id: z.string(),
    meta_contract_id: z.string(),
    method: z.string(),
    nonce: z.number(),
    public_key: z.string(),
    status: z.number(),
    timestamp: z.number(),
    token_id: z.string(),
    token_key: z.string(),
  }),
});

export const getActiveCronsResultSchema = z.object({
  crons: z.array(
    z.object({
      address: z.string(),
      chain: z.string(),
      status: z.number(),
      token_type: z.string(),
      topic: z.string(),
    })
  ),
  err_msg: z.string(),
  success: z.boolean(),
});

export const setMetadataArgArgsSchema = z.object({
  final_error_msg: z.string(),
  meta_contract_id: z.string(),
  metadatas: z.array(
    z.object({
      alias: z.string(),
      content: z.string(),
      public_key: z.string(),
    })
  ),
  on_metacontract_result: z.boolean(),
  transaction_hash: z.string(),
});
