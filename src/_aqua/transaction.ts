/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.9.4
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

// Functions
 
export type Get_pending_transactionsResult = { err_msg: string; success: boolean; transactions: { alias: string; data: string; data_key: string; error_text: string; from_peer_id: string; hash: string; host_id: string; meta_contract_id: string; method: string; nonce: number; public_key: string; status: number; timestamp: number; token_id: string; token_key: string; }[]; }
export function get_pending_transactions(
    config?: {ttl?: number}
): Promise<Get_pending_transactionsResult>;

export function get_pending_transactions(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Get_pending_transactionsResult>;

export function get_pending_transactions(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("node" "get_pending_transactions") [] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_pending_transactions",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbTransactionsResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "transactions" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Transaction",
                                "fields" : {
                                    "method" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "timestamp" : {
                                        "tag" : "scalar",
                                        "name" : "u64"
                                    },
                                    "data" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "hash" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "host_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "error_text" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "nonce" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "from_peer_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "token_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "meta_contract_id" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type Get_metadata_with_historyArgArgs = { alias: string; data_key: string; public_key: string; } 
export type Get_metadata_with_historyResult = { err_msg: string; history: string[]; metadata: string; success: boolean; }
export function get_metadata_with_history(
    args: Get_metadata_with_historyArgArgs,
    config?: {ttl?: number}
): Promise<Get_metadata_with_historyResult>;

export function get_metadata_with_history(
    peer: FluencePeer,
    args: Get_metadata_with_historyArgArgs,
    config?: {ttl?: number}
): Promise<Get_metadata_with_historyResult>;

export function get_metadata_with_history(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "args") [] args)
                        )
                        (null)
                       )
                       (call %init_peer_id% ("node" "get_metadata_with_history") [args.$.data_key! args.$.public_key! args.$.alias!] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadata_with_history",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "args" : {
                    "tag" : "struct",
                    "name" : "Metadata",
                    "fields" : {
                        "alias" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "data_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "public_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadataHistoryResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "history" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "metadata" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function bind_meta_contract(
    transaction_hash: string,
    config?: {ttl?: number}
): Promise<void>;

export function bind_meta_contract(
    peer: FluencePeer,
    transaction_hash: string,
    config?: {ttl?: number}
): Promise<void>;

export function bind_meta_contract(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("getDataSrv" "transaction_hash") [] transaction_hash)
                      )
                      (call %init_peer_id% ("node" "bind_meta_contract") [transaction_hash])
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "bind_meta_contract",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "transaction_hash" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_all_cronsResult = { crons: { address: string; chain: string; status: number; token_type: string; topic: string; }[]; err_msg: string; success: boolean; }
export function get_all_crons(
    config?: {ttl?: number}
): Promise<Get_all_cronsResult>;

export function get_all_crons(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Get_all_cronsResult>;

export function get_all_crons(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("node" "get_all_crons") [] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_all_crons",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbCronsResult",
                    "fields" : {
                        "crons" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Cron",
                                "fields" : {
                                    "token_type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "topic" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "chain" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_metadatasResult = { err_msg: string; metadatas: { alias: string; cid: string; data_key: string; public_key: string; }[]; success: boolean; }
export function get_metadatas(
    data_key: string,
    config?: {ttl?: number}
): Promise<Get_metadatasResult>;

export function get_metadatas(
    peer: FluencePeer,
    data_key: string,
    config?: {ttl?: number}
): Promise<Get_metadatasResult>;

export function get_metadatas(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "data_key") [] data_key)
                       )
                       (call %init_peer_id% ("node" "get_metadatas") [data_key] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadatas",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "data_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadatasResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "metadatas" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Metadata",
                                "fields" : {
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "cid" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "data_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_meta_contractResult = { err_msg: string; meta: { meta_contract_id: string; public_key: string; token_key: string; }; success: boolean; }
export function get_meta_contract(
    token_key: string,
    config?: {ttl?: number}
): Promise<Get_meta_contractResult>;

export function get_meta_contract(
    peer: FluencePeer,
    token_key: string,
    config?: {ttl?: number}
): Promise<Get_meta_contractResult>;

export function get_meta_contract(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "token_key") [] token_key)
                       )
                       (call %init_peer_id% ("node" "get_meta_contract") [token_key] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_meta_contract",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "token_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetaContractResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "meta" : {
                            "tag" : "struct",
                            "name" : "MetaContract",
                            "fields" : {
                                "meta_contract_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "public_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type Get_metadataArgArgs = { alias: string; data_key: string; public_key: string; } 
export type Get_metadataResult = { err_msg: string; metadata: { alias: string; cid: string; data_key: string; public_key: string; }; success: boolean; }
export function get_metadata(
    args: Get_metadataArgArgs,
    config?: {ttl?: number}
): Promise<Get_metadataResult>;

export function get_metadata(
    peer: FluencePeer,
    args: Get_metadataArgArgs,
    config?: {ttl?: number}
): Promise<Get_metadataResult>;

export function get_metadata(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "args") [] args)
                        )
                        (null)
                       )
                       (call %init_peer_id% ("node" "get_metadata") [args.$.data_key! args.$.public_key! args.$.alias!] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_metadata",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "args" : {
                    "tag" : "struct",
                    "name" : "Metadata",
                    "fields" : {
                        "alias" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "data_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "public_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbMetadataResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "metadata" : {
                            "tag" : "struct",
                            "name" : "Metadata",
                            "fields" : {
                                "alias" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "cid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "data_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "public_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type Send_transactionArgArgs = { alias: string; data: string; data_key: string; method: string; nonce: number; public_key: string; signature: string; token_id: string; token_key: string; } 
export type Send_transactionResult = { transaction_hash: string; }
export function send_transaction(
    args: Send_transactionArgArgs,
    config?: {ttl?: number}
): Promise<Send_transactionResult>;

export function send_transaction(
    peer: FluencePeer,
    args: Send_transactionArgArgs,
    config?: {ttl?: number}
): Promise<Send_transactionResult>;

export function send_transaction(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "args") [] args)
                        )
                        (null)
                       )
                       (call %init_peer_id% ("node" "send_transaction") [args.$.data_key! args.$.token_key! args.$.token_id! args.$.alias! args.$.public_key! args.$.signature! args.$.data! args.$.method! args.$.nonce!] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "send_transaction",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "args" : {
                    "tag" : "struct",
                    "name" : "SendTransaction",
                    "fields" : {
                        "method" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "nonce" : {
                            "tag" : "scalar",
                            "name" : "i64"
                        },
                        "data" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "signature" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "public_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "alias" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "data_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "token_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "token_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbResult",
                    "fields" : {
                        "transaction_hash" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type Set_cloneArgArgs = { data: string; final_error_msg: string; meta_contract_id: string; on_metacontract_result: boolean; transaction_hash: string; } 

export function set_clone(
    args: Set_cloneArgArgs,
    config?: {ttl?: number}
): Promise<void>;

export function set_clone(
    peer: FluencePeer,
    args: Set_cloneArgArgs,
    config?: {ttl?: number}
): Promise<void>;

export function set_clone(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "args") [] args)
                       )
                       (null)
                      )
                      (call %init_peer_id% ("node" "set_clone") [args.$.transaction_hash! args.$.meta_contract_id! args.$.on_metacontract_result! args.$.data! args.$.final_error_msg!])
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "set_clone",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "args" : {
                    "tag" : "struct",
                    "name" : "SetClone",
                    "fields" : {
                        "transaction_hash" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "on_metacontract_result" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "data" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "final_error_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "meta_contract_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_transactionResult = { err_msg: string; success: boolean; transaction: { alias: string; data: string; data_key: string; error_text: string; from_peer_id: string; hash: string; host_id: string; meta_contract_id: string; method: string; nonce: number; public_key: string; status: number; timestamp: number; token_id: string; token_key: string; }; }
export function get_transaction(
    hash: string,
    config?: {ttl?: number}
): Promise<Get_transactionResult>;

export function get_transaction(
    peer: FluencePeer,
    hash: string,
    config?: {ttl?: number}
): Promise<Get_transactionResult>;

export function get_transaction(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "hash") [] hash)
                       )
                       (call %init_peer_id% ("node" "get_transaction") [hash] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_transaction",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "hash" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbTransactionResult",
                    "fields" : {
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "transaction" : {
                            "tag" : "struct",
                            "name" : "Transaction",
                            "fields" : {
                                "method" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "timestamp" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                },
                                "data" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "public_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "alias" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "hash" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "host_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "status" : {
                                    "tag" : "scalar",
                                    "name" : "i64"
                                },
                                "error_text" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "nonce" : {
                                    "tag" : "scalar",
                                    "name" : "i64"
                                },
                                "from_peer_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "token_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "meta_contract_id" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "data_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_active_cronsResult = { crons: { address: string; chain: string; status: number; token_type: string; topic: string; }[]; err_msg: string; success: boolean; }
export function get_active_crons(
    config?: {ttl?: number}
): Promise<Get_active_cronsResult>;

export function get_active_crons(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Get_active_cronsResult>;

export function get_active_crons(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (call %init_peer_id% ("node" "get_active_crons") [] results)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [results])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_active_crons",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbCronsResult",
                    "fields" : {
                        "crons" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "Cron",
                                "fields" : {
                                    "token_type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "status" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    },
                                    "address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "topic" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "chain" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type Set_metadataArgArgs = { final_error_msg: string; meta_contract_id: string; metadatas: { alias: string; content: string; public_key: string; }[]; on_metacontract_result: boolean; transaction_hash: string; } 

export function set_metadata(
    args: Set_metadataArgArgs,
    config?: {ttl?: number}
): Promise<void>;

export function set_metadata(
    peer: FluencePeer,
    args: Set_metadataArgArgs,
    config?: {ttl?: number}
): Promise<void>;

export function set_metadata(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "args") [] args)
                       )
                       (null)
                      )
                      (call %init_peer_id% ("node" "set_metadata") [args.$.transaction_hash! args.$.meta_contract_id! args.$.on_metacontract_result! args.$.metadatas! args.$.final_error_msg!])
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "set_metadata",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "args" : {
                    "tag" : "struct",
                    "name" : "SetMetadata",
                    "fields" : {
                        "transaction_hash" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "on_metacontract_result" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "metadatas" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "FinalMetadata",
                                "fields" : {
                                    "alias" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "content" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "public_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "final_error_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "meta_contract_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
