module Node declares *

data Cron:
  address: string
  topic: string
  token_type: string
  chain: string
  status: i64

data FdbCronsResult:
  success: bool
  err_msg: string
  crons: []Cron

data MetaContract:
  token_key: string
  meta_contract_id: string
  public_key: string

data FdbMetaContractResult:
  success: bool
  err_msg: string
  meta: MetaContract

data FdbMetadataHistoryResult:
  success: bool
  err_msg: string
  metadata: string
  history: []string

data Metadata:
  data_key: string
  alias: string
  cid: string
  public_key: string

data FdbMetadataResult:
  success: bool
  err_msg: string
  metadata: Metadata

data FdbMetadatasResult:
  success: bool
  err_msg: string
  metadatas: []Metadata

data FdbResult:
  transaction_hash: string

data Transaction:
  hash: string
  token_key: string
  data_key: string
  nonce: i64
  from_peer_id: string
  host_id: string
  status: i64
  data: string
  public_key: string
  alias: string
  timestamp: u64
  meta_contract_id: string
  method: string
  error_text: string
  token_id: string

data FdbTransactionResult:
  success: bool
  err_msg: string
  transaction: Transaction

data FdbTransactionsResult:
  success: bool
  err_msg: string
  transactions: []Transaction

data FinalMetadata:
  public_key: string
  alias: string
  content: string

service Node("node"):
  bind_meta_contract(transaction_hash: string)  
  get_active_crons() -> FdbCronsResult
  get_all_crons() -> FdbCronsResult
  get_meta_contract(token_key: string) -> FdbMetaContractResult
  get_metadata(data_key: string, public_key: string, alias: string) -> FdbMetadataResult
  get_metadata_with_history(data_key: string, public_key: string, alias: string) -> FdbMetadataHistoryResult
  get_metadatas(data_key: string) -> FdbMetadatasResult
  get_pending_transactions() -> FdbTransactionsResult
  get_transaction(hash: string) -> FdbTransactionResult
  send_transaction(data_key: string, token_key: string, token_id: string, alias: string, public_key: string, signature: string, data: string, method: string, nonce: i64) -> FdbResult
  set_clone(transaction_hash: string, meta_contract_id: string, on_metacontract_result: bool, data: string, final_error_msg: string)  
  set_metadata(transaction_hash: string, meta_contract_id: string, on_metacontract_result: bool, metadatas: []FinalMetadata, final_error_msg: string)  